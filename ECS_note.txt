*ECS defines "Core" and "Extended" fields. and core field is most common across all use case
The document MUST have the @timestamp field. 
Use the data types defined for an ECS field. (define data type for all element).
Use the ecs.version field to define which version of ECS is used. 
Field names must be lower case 
Combine words using underscore and No special characters except underscore 
Use present tense unless field describes historical information. 
Use singular and plural names properly to reflect the field content. For example, use "requests_per_sec" rather than "request_per_sec".
Use prefixes for all fields, except for the base fields. EX: host
Nest fields inside a field set with dots
	 +The document structure should be nested JSON objects. If you use Beats or Logstash, the nesting of JSON objects is done for you automatically. 
         If you’re ingesting to Elasticsearch using the API, your fields must be nested objects, not strings containing dots.
	 +See Why does ECS use a dot notation instead of an underline notation? for more details.
General to specific
Avoid repetition or stuttering of words like "host.host_ip" should be "host.ip" and "host.hostname" is an exception to this rule. 
Avoid abbreviations when possible

* What are the benefits of using ECS?    1.Data correlation   2.Ease of recall   3.Ease of deduction  4.Reuse   5.Future proofing   
* What if I have fields that conflict with ECS?
The rename processor can help you resolve field conflicts. For example, imagine that you already have a field called "user," but ECS employs user as an object. 
You can use the rename processor on ingest time to rename your field to the matching ECS field. If your field does not match ECS, you can rename your field to user.value instead.
*Advantages of dot notation?    With dot notation, each prefix in Elasticsearch is an object
unless otherwise noted, the datatype used for integer fields should be long
we default to using the keyword type for IDs and codes but sometimes like  HTTP status does is integer
Elasticsearch can index text using datatypes: 1.text(Text datatype)   2.keyword
Default Elasticsearch convention:
    Canonical field:   myfield is text    
    Multi-field:   myfield.keyword is keyword
So the ECS multi-field convention for text is:
    Canonical field: myfield is keyword
    Multi-field: myfield.text is text
*The only exceptions to this convention are fields message and error.message, which are indexed for full text search only, with no multi-field. 
These two fields don’t follow the new convention because they are deemed too big of a breaking change with these two widely used fields in Beats.
ECS defines fields, their datatypes and their usage, and classifies them in "core" and "extended" levels.
*The field value for event.category[authentication, configuration, database, driver, file, host, iam, intrusion_detection, malware, network, package, process, registry, session, web]
*event.created contains the date/time when the event was first read by an agent, or by your pipeline.
 The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it.
*event.kind his is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
The field value must be one of the following:[alert, event, metric, state, pipeline_error, signal]
* event.outcome = [failure, success, unknown]
* event.type = [access, admin, allowed, change, connection, creation, deletion, denied, end, error, group, info, installation, protocol, start, user]
//=========================================  Fields   ==========================================================//
//====================================== base field =====================================// 
@timestamp					Date/time when the event originated.This is the date/time extracted from the event, typically representing when the event was generated by the source.If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
 labels						Custom key/value pairs.Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.docker and k8s labels
 message					For log events the message field contains the log message, optimized for viewing in a log viewer.For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.If multiple messages exist, they can be combined into one message.
 tags						List of keywords used to tag each event.
//===================================== agent fields =====================================//
Examples include Beats.
 agent.build.original(core)  			Extended build information for the agent.This field is intended to contain any build information that a data source may provide, no specific formatting is required
 agent.id(core)    	   			Unique identifier of this agent (if one exists).Example: For Beats this would be beat.id.
 agent.name(core)            			Custom name of the agent.This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
 agent.type(core) 	     			Type of the agent.The agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.
 agent.version(core)	    			Version of the agent.
//=================================== autonomous system fields ============================//
 as.number(extended)	   			Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
 as.organization.name(extended)	 		Organization name.
*The as fields are expected to be nested at: client.as, destination.as, server.as, source.as.
//================================== client fields =========================================//  
 client.address(extended)			Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket. You should always store the raw address in the .address field.
 client.bytes(core)				Bytes sent from the client to the server.
 client.domain(core)				Client domain
 client.ip(core)				IP address of the client
 client.mac(core)				MAC address of the client.The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
 client.nat.ip(extended) 			Translated IP of source based NAT sessions (e.g. internal client to internet).Typically connections traversing load balancers, firewalls, or routers.
 client.nat.port(extended) 			Translated port of source based NAT sessions (e.g. internal client to internet).Typically connections traversing load balancers, firewalls, or routers.
 client.packets(core)				Packets sent from the client to the server.
 client.port(core)				Port of the client.
 client.registered_domain(extended)    	 	The highest registered client domain, stripped of the subdomain.For example, the registered domain for "foo.example.com" is "example.com".
 client.subdomain(extended)			The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain
 client.top_level_domain(extended)		The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name
**client.as.*
**client.geo.*
**client.user.*
//================================== cloud fields =========================================//  
 cloud.account.id(extended)			The cloud account or organization id used to identify different entities in a multi-tenant environment.
 cloud.account.name(extended)			The cloud account name or alias used to identify different entities in a multi-tenant environment.Examples: AWS account name, Google Cloud ORG display name.
 cloud.availability_zone(extended)		Availability zone in which this host is running.
 cloud.instance.id(extended)			Instance ID of the host machine.
 cloud.instance.name(extended)			Instance name of the host machine.
 cloud.machine.type(extended)			Machine type of the host machine.
 cloud.project.id(extended)			The cloud project identifier.Examples: Google Cloud Project id, Azure Project id.
 cloud.project.name(extended)			The cloud project name.Examples: Google Cloud Project name, Azure Project name.
 cloud.provider(extended)			Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.
 cloud.region(extended)				Region in which this host is running.
 cloud.service.name(extended)			The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server.Examples: app engine, app service, cloud run, fargate, lambda.
//================================== Code Signature fields ================================//
 code_signature.exists(core)			Boolean to capture if a signature is present.
 code_signature.signing_id(extended)   		The identifier used to sign the process.This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.
 code_signature.status(extended)		Additional information about the certificate status.This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.
 code_signature.subject_name(core)		Subject name of the code signer.example: Microsoft Corporation
 code_signature.team_id(extended)		The team identifier used to sign the process.This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.
 code_signature.trusted(extended)		Stores the trust status of the certificate chain.Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.
 code_signature.valid(extended)			Boolean to capture if the digital signature is verified against the binary content.Leave unpopulated if a certificate was unchecked.
The code_signature fields are expected to be nested at: dll.code_signature, file.code_signature, process.code_signature.
Note also that the code_signature fields are not expected to be used directly at the root of the events.
//================================== Container fields ===================================//
 container.id(core) 				Unique container id.
 container.image.name(extended)			Name of the image the container was built on.
 container.image.tag(extended)			Container image tags.
 container.labels(extended)			Image labels.
 container.name(extended)			Container name.
 container.runtime(extended)			Runtime managing this container.
//================================== Data Stream fields ===================================//
{data_stream.type}-{data_stream.dataset}-{data_stream.namespace} This means the fields can only contain characters that are valid as part of names of data streams
 data_stream.dataset(extended) 			The field can contain anything that makes sense to signify the source of the data.nginx.access, prometheus, endpoint etc. For data streams that otherwise fit, but that do not have dataset set we use the value "generic" for the dataset value. event.dataset should have the same value as data_stream.dataset.
 data_stream.namespace(extended)		A user defined namespace. Namespaces are useful to allow grouping of data.Many users already organize their indices this way, and the data stream naming scheme now provides this best practice as a default
 data_stream.type(extended)			An overarching type for the data stream.Currently allowed values are "logs" and "metrics". We expect to also add "traces" and "synthetics" in the near future.
//================================== Destination fields ===================================//
 destination.address(extended)			Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket. You should always store the raw address in the .address field.
 destination.bytes(core)			Bytes sent from the destination to the source.
 destination.domain(core)			Destination domain.
 destination.ip(core)				IP address of the destination (IPv4 or IPv6).
 destination.mac(core)				MAC address of the destination.The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
 destination.nat.ip(extenede)			Translated ip of destination based NAT sessions (e.g. internet to private DMZ)Typically used with load balancers, firewalls, or routers.
 destination.nat.port(extended)			Port the source session is translated to by NAT Device.Typically used with load balancers, firewalls, or routers.
 destination.packets(core)			Packets sent from the destination to the source.
 destination.port(core)				Port of the destination.
 destination.registered_domain(extenede)	The highest registered destination domain, stripped of the subdomain.For example, the registered domain for "foo.example.com" is "example.com".
 destination.subdomain(extended)		The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
 destination.top_level_domain(extenede)		The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
//================================== DLL fields ===================================//
These fields contain information about code libraries dynamically loaded into processes.
 dll.name(core)					Name of the library.This generally maps to the name of the file on disk.
 dll.path(extended)				Full file path of the library.
**dll.code_signature.*
**dll.hash.*
**dll.pe.*
//================================== DNS fields ===================================//
 dns.answers(extended)				An array containing an object for each answer section returned by the server.
 dns.answers.class(extended)			The class of DNS data contained in this resource record.
 dns.answers.data(extended)			The data describing the resource.The meaning of this data depends on the type and class of the resource record.
 dns.answers.name(extended)			The domain name to which this resource record pertains.If a chain of CNAME is being resolved, each answer’s name should be the one that corresponds with the answer’s data. It should not simply be the original question.name repeated.
 dns.answers.ttl(extended)			The time interval in seconds that this resource record may be cached before it should be discarded. Zero values mean that the data should not be cached.
 dns.answers.type(extended)			The type of data contained in this resource record.
 dns.header_flags(extended)			Array of 2 letter DNS header flags.Expected values are: AA, TC, RD, RA, AD, CD, DO.
 dns.id(extended)				The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.
 dns.op_code(extended)				The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.
 dns.question.class(extended)			The class of records being queried.
 dns.question.name(extended)			The name being queried.If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.
 dns.question.registered_domain(extended)	The highest registered domain, stripped of the subdomain.For example, the registered domain for "foo.example.com" is "example.com".
 dns.question.subdomain(extended)		The subdomain is all of the labels under the registered_domain.
 dns.question.top_level_domain(extended)	The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
 dns.question.type(extended)			The type of record being queried.
 dns.resolved_ip(extended)			Array containing all IPs seen in answers.data.The answers array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to dns.resolved_ip makes it possible to index them as IP addresses, and makes them easier to visualize and query for.
 dns.response_code(extended)			The DNS response code.
 dns.type(extended)				The type of DNS event captured, query or answer.If your source of DNS events only gives you DNS queries, you should only create dns events of type dns.type:query.
//================================== ECS fields ===================================//

 ecs.version(core)				ECS version this event conforms to. ecs.version is a required field and must exist in all events.

//================================== error fields ===================================//
 error.code(core)				Error code describing the error.
 error.id(core)					Unique identifier for the error.
 error.message(core)				Error message.
 error.stack_trace(extended)			The stack trace of this error in plain text.
 error.type(extended)				The type of the error, for example the class name of the exception.

//================================== Event fields ===================================//
The event fields are used for context information about the log or metric event itself.
 event.action(core)				The action captured by the event.This describes the information in the event. It is more specific than event.category. Examples are group-add, process-started, file-created. The value is normally defined by the implementer.
 event.category(core)				This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.event.category represents the "big buckets" of ECS categories. For example, filtering on event.category:process yields all events relating to process activity. This field is closely related to event.type, which is used as a subcategory.
 event.code(extended)				Identification code for this event, if one exists.Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.
 event.created(core)				event.created contains the date/time when the event was first read by an agent, or by your pipeline.
 event.dataset(core)				Name of the dataset.If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.It’s recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.
 event.duration(core)				Duration of the event in nanoseconds.If event.start and event.end are known this value should be the difference between the end and start time.
 event.end(extended)				event.end contains the date when the event ended or when the activity was last observed.
 event.hash(extended)				Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate log integrity.
 event.id(core)					Unique ID to describe the event.'
 event.ingested(core)				Timestamp when an event arrived in the central data store.This is different from @timestamp, which is when the event originally occurred. It’s also different from event.created, which is meant to capture the first time an agent saw the event.
 event.kind(core)				This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.event.kind gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.Important: The field value must be one of the following:alert, event, metric, state, pipeline_error, signal
 event.module(core)				Name of the module this data is coming from.If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), event.module should contain the name of this module.
 event.original(core)				Raw text message of entire event. Used to demonstrate log integrity.This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from _source. If users wish to override this and index this field, consider using the wildcard data type.
 event.outcome(core)				This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.event.outcome simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.
 event.provider(extended)			Source of the event.Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).
 event.reason(extended)				Reason why this event happened, according to the source.This describes the why of a particular action or outcome captured in the event. Where event.action captures the action from the event, event.reason describes why that action was taken. For example, a web proxy with an event.action which denied the request may also populate event.reason with the reason why (e.g. blocked site).
 event.reference(extended)			Reference URL linking to additional information about this event.This URL links to a static definition of this event. Alert events, indicated by event.kind:alert, are a common use case for this field.
 event.risk_score(core)				Risk score or priority of the event (e.g. security solutions). Use your system’s original value here.
 event.risk_score_norm(extended)		Normalized risk score or priority of the event, on a scale of 0 to 100.This is mainly useful if you use more than one system that assigns risk scores, and you want to see a normalized value across all systems.
 event.sequence(extended)			Sequence number of the event.The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.
 event.severity(core)				The numeric severity of the event according to your event source.What the different severity values mean can be different between sources and use cases. It’s up to the implementer to make sure severities are consistent across events from the same source.
 event.start(extended)				event.start contains the date when the event started or when the activity was first observed.
 event.timezone(extended)			This field should be populated when the event’s timestamp does not include timezone information already (e.g. default Syslog timestamps). It’s optional otherwise.
 event.type(core)				This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
 event.url(extended)				URL linking to an external system to continue investigation of this event.This URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by event.kind:alert, are a common use case for this field.
//================================== File fields ===================================//
A file is defined as a set of information that has been created on, or has existed on a filesystem.
File objects can be associated with host events, network events, and/or file events (e.g., those produced by File Integrity Monitoring [FIM] products or services). File fields provide details about the affected file associated with the event or metric.
 file.accessed(extended)			Last time the file was accessed.Note that not all filesystems keep track of access time.
 file.attributes(extended)			Array of file attributes.Attributes names will vary by platform. Here’s a non-exhaustive list of values that are expected in this field: archive, compressed, directory, encrypted, execute, hidden, read, readonly, system, write.
 file.created(extended)				File creation time.Note that not all filesystems store the creation time.
 file.ctime(extended)				Last time the file attributes or metadata changed.Note that changes to the file content will update mtime. This implies ctime will be adjusted at the same time, since mtime is an attribute of the file.
 file.device(extended)				Device that is the source of the file.
 file.directory(extended)			Directory where the file is located. It should include the drive letter, when appropriate.
 file.drive_letter(extended)			Drive letter where the file is located. This field is only relevant on Windows.The value should be uppercase, and not include the colon.
 file.extension(extended)			File extension, excluding the leading dot.
 file.gid(extended)				Primary group ID (GID) of the file.
 file.group(extended)				Primary group name of the file.
 file.inode(extended)				Inode representing the file in the filesystem.
 file.mime_type(extended)			MIME type should identify the format of the file or stream of bytes using IANA official types, where possible. When more than one type is applicable, the most specific type should be used.
 file.mode(extended)				Mode of the file in octal representation.
 file.mtime(extended)				Last time the file content was modified.
 file.name(extended)				Name of the file including the extension, without the directory.
 file.owner(extended)				File owner’s username.
 file.path(extended)				Full path to the file, including the file name. It should include the drive letter, when appropriate.
 file.size(extended)				File size in bytes.Only relevant when file.type is "file".
 file.target_path(extended)			Target path for symlinks.
 file.type(extended)				File type (file, dir, or symlink).
 file.uid(extended)				The user ID (UID) or security identifier (SID) of the file owner.
**file.code_signature.*
**file.hash.*
**file.pe.*
**file.x509.*
//================================== Geo fields ===================================//
 geo.city_name(core)				City name.
 geo.continent_code(core)			Two-letter code representing continent’s name.	
 geo.continent_name(core)			Name of the continent.
 geo.country_iso_code(core)			Country ISO code.
 geo.country_name(core)				Country name.
 geo.location(core)				Longitude and latitude.
 geo.name(extended)				User-defined description of a location, at the level of granularity they care about.User-defined description of a location, at the level of granularity they care about.
 geo.postal_code(core)				Postal code associated with the location.Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.
 geo.region_iso_code(core)			Region ISO code.
 geo.region_name(core)				Region name.
 geo.timezone(core)				The time zone of the location, such as IANA time zone name.
The geo fields are expected to be nested at: client.geo, destination.geo, host.geo, observer.geo, server.geo, source.geo.

//================================== Group fields ===================================//
The group fields are meant to represent groups that are relevant to the event.
 group.domain(extended)				Name of the directory the group is a member of.For example, an LDAP or Active Directory domain name.
 group.id(extended)				Unique identifier for the group on the system/platform.
 group.name(extended)				Name of the group.
//================================== Hash fields ===================================//
 hash.md5(extended)				MD5 hash.
 hash.ssdeep(extended)				SSDEEP hash.
The hash fields are expected to be nested at: dll.hash, file.hash, process.hash.
//================================== Host fields ===================================//
 host.architecture(core)			Operating system architecture.
 host.cpu.usage(extended)			Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1.
 host.disk.read.bytes(extended)			The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.
 host.disk.write.bytes(extended)		The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.
 host.domain(extended)				Name of the domain of which the host is a member.For example, on Windows this could be the host’s Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host’s LDAP provider.
 host.hostname(core)				Hostname of the host.It normally contains what the hostname command returns on the host machine.
 host.id(core)					Unique host id.As hostname is not always unique, use values that are meaningful in your environment.
 host.ip(core)					Host ip addresses.
 host.mac(core)					Host MAC addresses.The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
 host.name(Core)				Name of the host.It can contain what hostname returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.
 host.network.egress.bytes(extended)		The number of bytes (gauge) sent out on all network interfaces by the host since the last metric collection.
 host.network.egress.packets(extended)		The number of packets (gauge) sent out on all network interfaces by the host since the last metric collection.
 host.network.ingress.bytes(extended)		The number of bytes received (gauge) on all network interfaces by the host since the last metric collection.
 host.network.ingress.packets(extended)		The number of packets (gauge) received on all network interfaces by the host since the last metric collection.
 host.type(core)				Type of host.For Cloud providers this can be the machine type like t2.medium. If vm, this could be the container, for example, or other information meaningful in your environment.
 host.uptime(extended)				Seconds the host has been up.
**host.geo.*
**host.user.*
**host.os.*
//================================== HTTP fields ===================================//
 http.request.body.bytes(extended)		Size in bytes of the request body.
 http.request.body.content(extended)		The full HTTP request body.
 http.request.bytes(extended)			Total size in bytes of the request (body and headers).
 http.request.id(extended)			A unique identifier for each HTTP request to correlate logs between clients and servers in transactions.The id may be contained in a non-standard HTTP header, such as X-Request-ID or X-Correlation-ID.
 http.request.method(extended)			HTTP request method.Prior to ECS 1.6.0 the following guidance was provided:"The field value must be normalized to lowercase for querying."
 http.request.mime_type(extended)		Mime type of the body of the request.This value must only be populated based on the content of the request body, not on the Content-Type header. Comparing the mime type of a request with the request’s Content-Type header can be helpful in detecting threats or misconfigured clients.
 http.request.referrer(extended)		Referrer for this HTTP request.
 http.response.body.bytes(extended)		Size in bytes of the response body.
 http.response.body.content(extended)		The full HTTP response body.
 http.response.bytes(extended)			Total size in bytes of the response (body and headers).
 http.response.mime_type(extended)		Mime type of the body of the response.This value must only be populated based on the content of the response body, not on the Content-Type header. Comparing the mime type of a response with the response’s Content-Type header can be helpful in detecting misconfigured servers.
 http.response.status_code(extended)		HTTP response status code.
 http.version(extended)				HTTP version.
//================================== Interface fields ===================================//
The interface fields are used to record ingress and egress interface information when reported by an observer (e.g. firewall, router, load balancer) in the context of the observer handling a network connection.
 interface.alias(extended)			Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.
 interface.id(extended)				Interface ID as reported by an observer (typically SNMP interface ID).
 interface.name(extended)			Interface name as reported by the system.
The interface fields are expected to be nested at: observer.egress.interface, observer.ingress.interface.
//================================== Log fields ===================================//
Details about the event’s logging mechanism or logging transport.
 log.file.path(extended)			Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
 log.level(core)				Original log level of the log event.If the source of the event provides a log level or textual severity, this is the one that goes in log.level. If your source doesn’t specify one, you may put your event transport’s severity here (e.g. Syslog severity).Some examples are warn, err, i, informational.
 log.logger(core)				The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.
 log.origin.file.line(extended)			The line number of the file containing the source code which originated the log event.
 log.origin.file.name(extended)			The name of the file containing the source code which originated the log event.Note that this field is not meant to capture the log file. The correct field to capture the log file is log.file.path.
 log.origin.function(extended)			The name of the function or method which originated the log event.
 log.original(core)				This is the original log message and contains the full log message before splitting it up in multiple parts. 
 log.syslog(extended)				The Syslog metadata of the event, if the event was transmitted via Syslog. Please see RFCs 5424 or 3164.
 log.syslog.facility.code(extended)		The Syslog numeric facility of the log event, if available.According to RFCs 5424 and 3164, this value should be an integer between 0 and 23.
 log.syslog.facility.name(extended)		The Syslog text-based facility of the log event, if available.
 log.syslog.priority(extended)			Syslog numeric priority of the event, if available.
 log.syslog.severity.code(extended)		The Syslog numeric severity of the log event, if available.If the event source publishing via Syslog provides a different numeric severity value (e.g. firewall, IDS), your source’s numeric severity should go to event.severity. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to event.severity.
 log.syslog.severity.name(extended)		The Syslog numeric severity of the log event, if available.If the event source publishing via Syslog provides a different severity value (e.g. firewall, IDS), your source’s text severity should go to log.level. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to log.level.
//================================== Network fields ===================================//
The network is defined as the communication path over which a host or network event happens.
 network.application(extended)			A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.
 network.bytes(core)				Total bytes transferred in both directions.If source.bytes and destination.bytes are known, network.bytes is their sum. 
 network.community_id(extended)			A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.
 network.direction(core)			Direction of the network traffic.Recommended values are:ingress, egress, inbound, outbound, internal, external, unknown.  When mapping events from a host-based monitoring context, populate this field from the host’s point of view, using the values "ingress" or "egress".When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values "inbound", "outbound", "internal" or "external".
 network.forwarded_ip(core)			Host IP address when the source IP address is the proxy.
 network.iana_number(extended)			IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.
 network.inner(extended)			Network.inner fields are added in addition to network.vlan fields to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)
 network.name(extended)				Name given by operators to sections of their network.
 network.packets(core)				Total packets transferred in both directions.If source.packets and destination.packets are known, network.packets is their sum.
 network.protocol(core)				L7 Network protocol name. ex. http, lumberjack, transport protocol.The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
 network.transport(core)			Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
 network.type(core)				In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc.  The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".
**network.inner.vlan.*
**network.vlan.*
//================================== Observer fields ===================================//
An observer is defined as a special network, security, or application device used to detect, observe, or create network, security, or application-related events and metrics.
 observer.egress(extended)			Observer.egress holds information like interface number and name, vlan, and zone information to classify egress traffic. Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.
 observer.egress.zone(extended)			Network zone of outbound traffic as reported by the observer to categorize the destination area of egress traffic, e.g. Internal, External, DMZ, HR, Legal, etc.
 observer.hostname(core)			Hostname of the observer.
 observer.ingress(extended)			Observer.ingress holds information like interface number and name, vlan, and zone information to classify ingress traffic. Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.
 observer.ingress.zone(extended)		Network zone of incoming traffic as reported by the observer to categorize the source area of ingress traffic. e.g. internal, External, DMZ, HR, Legal, etc.
 observer.ip(core)				IP addresses of the observer.
 observer.mac(core)				MAC addresses of the observer.The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
 observer.name(extended)			Custom name of the observer.This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization.
 observer.product(extended)			The product name of the observer.
 observer.serial_number(extended)		Observer serial number.
 observer.type(core)				The type of the observer the data is coming from.There is no predefined list of observer types. Some examples are forwarder, firewall, ids, ips, proxy, poller, sensor, APM server.
 observer.vendor(core)				Vendor name of the observer.
 observer.version(core)				Observer version.
** observer.egress.interface.*
** observer.egress.vlan.*
** observer.geo.*
** observer.ingress.interface.*
** observer.ingress.vlan.*
** observer.os.*
//================================== orchestrator fields ===================================//
Fields that describe the resources which container orchestrators manage or act upon.
 orchestrator.api_version(extended)		API version being used to carry out the action
 orchestrator.cluster.name(extended)		Name of the cluster.
 orchestrator.cluster.url(extended)		URL of the API used to manage the cluster.
 orchestrator.cluster.version(extended)		The version of the cluster.
 orchestrator.namespace(extended)		Namespace in which the action is taking place.
 orchestrator.organization(extended)		Organization affected by the event (for multi-tenant orchestrator setups).
 orchestrator.resource.name(extended)		Name of the resource being acted upon.
 orchestrator.resource.type(extended)		Type of resource being acted upon.
 orchestrator.type(extended)			Orchestrator cluster type (e.g. kubernetes, nomad or cloudfoundry).
//================================== organization fields ===================================//
The organization fields enrich data with information about the company or entity the data is associated with.
 organization.id(extended)			Unique identifier for the organization.
 organization.name(extended)			Organization name.
//================================== operating system fields ===================================//
 os.family(extended)				OS family (such as redhat, debian, freebsd, windows).
 os.full(extended)				Operating system name, including the version or code name.
 os.kernel(extended)				Operating system kernel version as a raw string.
 os.name(extended)				Operating system name, without the version.
 os.platform(extended)				Operating system platform (such centos, ubuntu, windows).
 os.type(extended)				Use the os.type field to categorize the operating system into one of the broad commercial families.One of these following values should be used (lowercase): linux, macos, unix, windows.
 os.version(extended)				Operating system version as a raw string.
The os fields are expected to be nested at: host.os, observer.os, user_agent.os.
//================================== package fields ===========================================//
 package.architecture(extended)			Package architecture.
 package.build_version(extended)		Additional information about the build version of the installed package.For example use the commit SHA of a non-released package.
 package.checksum(extended)			Checksum of the installed package for verification.
 package.description(extended)			Description of the package.
 package.install_scope(extended)		Indicating how the package was installed, e.g. user-local, global.
 package.installed(extended)			Time when package was installed.
 package.license(extended)			License under which the package was released.Use a short name, e.g. the license identifier from SPDX License List where possible (https://spdx.org/licenses/).
 package.name(extended)				Package name
 package.path(extended)				Path where the package is installed.
 package.reference(extended)			Home page or reference URL of the software in this package, if available.
 package.size(extended)				Package size in bytes.
 package.type(extended)				Type of package.This should contain the package file type, rather than the package manager name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.
 package.version(extended)			Package version

//================================== PE Header fields ===========================================//
These fields contain Windows Portable Executable (PE) metadata.
 pe.architecture(extended)			CPU architecture target for the file.
 pe.company(extended)				Internal company name of the file, provided at compile-time.
 pe.description(extended)			Internal description of the file, provided at compile-time.
 pe.file_version(extended)			Internal version of the file, provided at compile-time.
 pe.imphash(extended)				A hash of the imports in a PE file. An imphash — or import hash — can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
 pe.original_file_name(extended)		Internal name of the file, provided at compile-time.
 pe.product(extended)				Internal product name of the file, provided at compile-time.example: Microsoft® Windows® Operating System
The pe fields are expected to be nested at: dll.pe, file.pe, process.pe.
//================================== Process fields ===========================================//
 process.args(extended)				Array of process arguments, starting with the absolute path to the executable.May be filtered to protect sensitive information.
 process.args_count(extended)			This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.
 process.command_line(extended)			Full command line that started the process, including the absolute path to the executable, and all arguments.Some arguments may be filtered to protect sensitive information.
 process.entity_id(extended)			Unique identifier for the process. The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process.
 process.executable(extended)			Absolute path to the process executable.example: /usr/bin/ssh
 process.exit_code(extended)			The exit code of the process, if this is a termination event. The field should be absent if there is no exit code for the event (e.g. process start).
 process.name(extended)				Process name. Sometimes called program name or similar.
 process.pgid(extended)				Identifier of the group of processes the process belongs to.
 process.pid(core)				Process id.
 process.ppid(extended)				Parent process' pid.
 process.start(extended)			The time the process started.
 process.thread.id(extended)			Thread ID.
 process.thread.name(extended)			Thread name.
 process.title(extended)			Process title.The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.
 process.uptime(extended)			Seconds the process has been up.
 process.working_directory(extended)		The working directory of the process.
**process.code_signature.*
**process.hash.*
**process.parent.*
**process.pe.*
//================================== Registry fields ===========================================//
 registry.data.bytes(extended)			Original bytes written with base64 encoding.For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by lp_data. This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.
 registry.data.strings(core)			Content when writing string types.Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g "1").example: ["C:\rta\red_ttp\bin\myapp.exe"]
 registry.data.type(core)			Standard registry type for encoding contents
 registry.hive(core)				Abbreviated name for the hive.
 registry.key(core)				Hive-relative path of keys.example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe
 registry.path(core)				Full path, including hive, key and value. example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger
 registry.value(core)				Name of the value written.
//================================== Related fields ===========================================//		
This field set is meant to facilitate pivoting around a piece of data.
A concrete example is IP addresses, which can be under host, observer, source, destination, client, server, and network.forwarded_ip. If you append all IPs to related.ip, you can then search for a given IP trivially, no matter where it appeared, by querying related.ip:192.0.2.15.
 related.hash(extended)				All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you’re unsure what the hash algorithm is (and therefore which key name to search).
 related.hosts(extended)			All hostnames or other host identifiers seen on your event. Example identifiers include FQDNs, domain names, workstation names, or aliases.
 related.ip(extended)				All of the IPs seen on your event.
 related.user(extended)				All the user names seen on your event.
//================================== Rule fields ===========================================//
Rule fields are used to capture the specifics of any observer or agent rules that generate alerts or other notable events.
Examples of data sources that would populate the rule fields include: network admission control platforms, network or host IDS/IPS, network firewalls, web application firewalls, url filters, endpoint detection and response (EDR) systems, etc.
 rule.author(extended)				Name, organization, or pseudonym of the author or authors who created the rule used to generate this event.
 rule.category(extended)			A categorization value keyword used by the entity using the rule for detection of this event.
 rule.description(extended)			The description of the rule generating the event.example: Block requests to public DNS over HTTPS / TLS protocols
 rule.id(extended)				A rule ID that is unique within the scope of an agent, observer, or other entity using the rule for detection of this event.
 rule.license(extended)				Name of the license under which the rule used to generate this event is made available.
 rule.name(extended)				The name of the rule or signature generating the event.
 rule.reference(extended)			Reference URL to additional information about the rule used to generate this event.The URL can point to the vendor’s documentation about the rule. If that’s not available, it can also be a link to a more general page describing this type of alert.example: https://en.wikipedia.org/wiki/DNS_over_TLS
 rule.ruleset(extended)				Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.
 rule.uuid(extended)				A rule ID that is unique within the scope of a set or group of agents, observers, or other entities using the rule for detection of this event. example: 1100110011
 rule.version(extended)				The version / revision of the rule being used for analysis.
//================================== Server fields ===========================================//
A Server is defined as the responder in a network connection for events regarding sessions, connections, or bidirectional flow records.
 server.address(extended)			Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket. You should always store the raw address in the .address field.
 server.bytes(core)				Bytes sent from the server to the client.
 server.domain(core)				Server domain.
 server.ip(core)				IP address of the server (IPv4 or IPv6).
 server.mac(core)				MAC address of the server.The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
 server.nat.ip(extended)			Translated ip of destination based NAT sessions (e.g. internet to private DMZ)Typically used with load balancers, firewalls, or routers.
 server.nat.port(extended)			Translated port of destination based NAT sessions (e.g. internet to private DMZ)  Typically used with load balancers, firewalls, or routers.
 server.packets(core)				Packets sent from the server to the client.
 server.port(core)				Port of the server.
 server.registered_domain(extended)		The highest registered server domain, stripped of the subdomain.For example, the registered domain for "foo.example.com" is "example.com".
 server.subdomain(extended)			The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
 server.top_level_domain(extended)		The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
**server.as.*
**server.geo.*
**server.user.*
//================================== Service fields ===========================================//
The service fields describe the service for or from which the data was collected.
 service.ephemeral_id(extended)			Ephemeral identifier of this service (if one exists).This id normally changes across restarts, but service.id does not.
 service.id(core)				Unique identifier of the running service. If the service is comprised of many nodes, the service.id should be the same for all nodes.
 service.name(core)				Name of the service data is collected from.The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name.
 service.node.name(extended)			This allows for two nodes of the same service running on the same host to be differentiated. Therefore, service.node.name should typically be unique across nodes of a given service.
 service.state(core)			Current state of the service.
 service.type(core)				The type of the service data is collected from.The type can be used to group and correlate logs and metrics from one service type.Example: If logs or metrics are collected from Elasticsearch, service.type would be elasticsearch.
 service.version(core)				Version of the service the data was collected from.This allows to look at a data set only for a specific version of a service.
//================================== Source fields ===========================================//						
 source.address(extended)			Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket. You should always store the raw address in the .address field.
 source.bytes(core)				Bytes sent from the source to the destination.
 source.domain(core)				Source domain.
 source.ip(core)				IP address of the source (IPv4 or IPv6).
 source.mac(core)				MAC address of the source.
 source.nat.ip(extended)			Translated ip of source based NAT sessions (e.g. internal client to internet)Typically connections traversing load balancers, firewalls, or routers.
 source.nat.port(extended)			Translated port of source based NAT sessions. (e.g. internal client to internet). Typically used with load balancers, firewalls, or routers.
 source.packets(core)				Packets sent from the source to the destination.
 source.port(core)				Port of the source.
 source.registered_domain(extended)		The highest registered source domain, stripped of the subdomain.For example, the registered domain for "foo.example.com" is "example.com".
 source.subdomain(extended)			The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
 source.top_level_domain(extended)		The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
**source.as.*
**source.geo.*
**source.user.*
//================================== Threat fields ===========================================//
Fields to classify events and alerts according to a threat taxonomy such as the MITRE ATT&CK® framework.
These fields are for users to classify alerts from all of their sources (e.g. IDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to capture the high level category of the threat (e.g. "impact"). The threat.technique.* fields are meant to capture which kind of approach is used by this detected threat, to accomplish the goal (e.g. "endpoint denial of service").
 threat.framework(extended)			Name of the threat framework used to further categorize and classify the tactic and technique of the reported threat. Framework classification can be provided by detecting systems, evaluated at ingest time, or retrospectively tagged to events.example: MITRE ATT&CK
 threat.tactic.id(extended)			The id of tactic used by this threat. You can use a MITRE ATT&CK® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )
 threat.tactic.name(extended)			Name of the type of tactic used by this threat. You can use a MITRE ATT&CK® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/)
 threat.tactic.reference(extended)		The reference url of tactic used by this threat. You can use a MITRE ATT&CK® tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/ )
 threat.technique.id(extended)			The id of technique used by this threat. You can use a MITRE ATT&CK® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)
 threat.technique.name(extended)		The name of technique used by this threat. You can use a MITRE ATT&CK® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)
 threat.technique.reference(extended)		The reference url of technique used by this threat. You can use a MITRE ATT&CK® technique, for example. (ex. https://attack.mitre.org/techniques/T1059/)
 threat.technique.subtechnique.id(extended)	The full id of subtechnique used by this threat. You can use a MITRE ATT&CK® subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)
 threat.technique.subtechnique.name(extended)	The name of subtechnique used by this threat. You can use a MITRE ATT&CK® subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)
 threat.technique.subtechnique.reference(extended)	The reference url of subtechnique used by this threat. You can use a MITRE ATT&CK® subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/)
//================================== TLS fields ===========================================//
Fields related to a TLS connection. These fields focus on the TLS protocol itself and intentionally avoids in-depth analysis of the related x.509 certificate files.
 tls.cipher(extended)				String indicating the cipher used during the current connection.
 tls.client.certificate(extended)		PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of client.certificate_chain since this value also exists in that list.
 tls.client.certificate_chain(extended)		Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of client.certificate since that value should be the first certificate in the chain.
 tls.client.hash.md5(extended)			Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
 tls.client.hash.sha1(extended)			Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
 tls.client.hash.sha256(extended)		Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
 tls.client.issuer(extended)			Distinguished name of subject of the issuer of the x.509 certificate presented by the client.
 tls.client.ja3(extended)			A hash that identifies clients based on how they perform an SSL/TLS handshake.
 tls.client.not_after(extended)			Date/Time indicating when client certificate is no longer considered valid.
 tls.client.not_before(extended)		Date/Time indicating when client certificate is first considered valid.
 tls.client.server_name(extended)		Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to destination.domain.
 tls.client.subject(extended)			Distinguished name of subject of the x.509 certificate presented by the client.example: CN=myclient, OU=Documentation Team, DC=example, DC=com
 tls.client.supported_ciphers(extended)		Array of ciphers offered by the client during the client hello.example: ["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "..."]
 tls.curve(extended)				String indicating the curve used for the given cipher, when applicable.
 tls.established(extended)			Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
 tls.next_protocol(extended)			String indicating the protocol being tunneled. Per the values in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.
 tls.resumed(extended)				Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.
 tls.server.certificate(extended)		PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of server.certificate_chain since this value also exists in that list.
 tls.server.certificate_chain(extended)		Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of server.certificate since that value should be the first certificate in the chain.example: ["MII...", "MII..."]
 tls.server.hash.md5(extended)			Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
 tls.server.hash.sha1(extended)			Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
 tls.server.hash.sha256(extended)		Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
 tls.server.issuer(extended)			Subject of the issuer of the x.509 certificate presented by the server.example: CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com
 tls.server.ja3s(extended)			A hash that identifies servers based on how they perform an SSL/TLS handshake.
 tls.server.not_after(extended)			Timestamp indicating when server certificate is no longer considered valid. example: 2021-01-01T00:00:00.000Z
 tls.server.not_before(extended)		Timestamp indicating when server certificate is first considered valid.
 tls.server.subject(extended)			Subject of the x.509 certificate presented by the server.example: CN=www.example.com, OU=Infrastructure Team, DC=example, DC=com
 tls.version(extended)				Numeric part of the version parsed from the original string.
 tls.version_protocol				Normalized lowercase protocol name parsed from original string.
**tls.client.x509.*
**tls.server.x509.*
//================================== Tracing fields ===========================================//
Distributed tracing makes it possible to analyze performance throughout a microservice architecture all in one view. This is accomplished by tracing all of the requests - from the initial web request in the front-end service - to queries made through multiple back-end services.
Unlike most field sets in ECS, the tracing fields are not nested under the field set name. In other words, the correct field name is trace.id, not tracing.trace.id, and so on.
 span.id(extended)			 	Unique identifier of the span within the scope of its trace.A span represents an operation within a transaction, such as a request to another service, or a database query.
 trace.id(extended)				Unique identifier of the trace.A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.
 transaction.id(extended)			Unique identifier of the transaction within the scope of its trace.A transaction is the highest level of work measured within a service, such as a request to a server.
//================================== URL fields ==============================================//
 url.domain(extended)				Domain of the url, such as "www.elastic.co".
 url.extension(extended)			The field contains the file extension from the original request url, excluding the leading dot.The file extension is only set if it exists, as not every url has a file extension.
 url.fragment(extended)				Portion of the url after the #, such as "top".The # is not part of the fragment.
 url.full(extended)				If full URLs are important to your use case, they should be stored in url.full, whether this field is reconstructed or present in the event source.
 url.original(extended)				Unmodified original url as seen in the event source.Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
 url.password(extended)				Password of the request.
 url.path(extended)				Path of the request, such as "/search".
 url.port(extended)				Port of the request, such as 443.
 url.query(extended)				The query field describes the query string of the request, such as "q=elasticsearch".The ? is excluded from the query string. If a URL contains no ?, there is no query field. If there is a ? but no query, the query field exists with an empty string. The exists query can be used to differentiate between the two cases.
 url.registered_domain(extended)		The highest registered url domain, stripped of the subdomain.
 url.scheme(extended)				Scheme of the request, such as "https".
 url.subdomain(extended)			The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
 url.top_level_domain(extended)			The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
 url.username(extended)				Username of the request.
//================================== User fields ==============================================//
The user fields describe information about the user that is relevant to the event.
 user.domain(extended)				Name of the directory the user is a member of.For example, an LDAP or Active Directory domain name.
 user.email(extended)				User email address.		
 user.full_name(extended)			User’s full name, if available.
 user.hash(extended)				Unique user hash to correlate information for a user in anonymized form.
 user.id(core)					Unique identifier of the user.
 user.name(core)				Short name or login of the user.
 user.roles(extended)				Array of user roles at the time of the event.
**user.changes.*
**user.effective.*
**user.group.*
**user.target.*
//================================== User fields ==============================================//
		


//================================= ECS categorization Field  ==================================================//

We classify event in two way:      1.Where is it from?       2.What is it?	
categorization field hold the "what is it" and ECS define four categorization fields for this purpose:
1.event.kind 
2.event.category
3.event.type
4.event.outcome

Where is it from? use field like event.module, event.dataset, agent.type, observer.type
//================================= event.kind  =================================================================//

event.kind gives high-level information about what type of information the event contains
event.kind = [ alert , event , metric , state , pipeline_error , signal ] 
alert:
	often populated for events coming from firewalls, intrusion detection systems, endpoint detection and response systems
event:
	It's used to represent events that indicate that something happened.
metric:
	indicate that this event describes a numeric measurement taken at given point in time.
	EX. cpu utilization, memory usage, or device temperature.
state:
	similar to metric, indicate that this event describes a measurement take at given point in time, except that the measurement does not result in a numeric value
	Ex. include periodic events reporting ELK cluster state, the state of tcp connection(open, close , fin_wait,...), the state of host with respect to a software vulnerability(vulnerable, not vulnerable) and the state of system regarding compliance with a regulatory standard (compliant, not compliant).
	note that an event describes a change of state would not use event.kind:state it would used event.kind:event 
pipeline_error:
	indicate that error occurred during the ingestion of this event, and that event data may be missing, inconsistent, or incorrect. this kind happen often when we hava parsing errors.
signal:
	This value is used by elastic security app to denote an elasticsearch document that was created by a SIEM detection engine rule. a signal will typically trigger a notification that something meaningful happened and should be investigated.
	
//======================================== event.category  =================================================================//
indicate second level in the ECS category hierarchy
and represent the "big bucket" of ECS categorization.
this field is an array
event.category = [ authentication, configuration, database, driver, file, host, iam, intrusion_detection, malware, network, package, process, registey, session, web ] 
authentication:	
	common source for this log are windows and ssh logs, expected event types for category authentication: start, end, info
configuration:
	created, modify or deleting the setting or prameter an application. process, or system. expected event types for category configuration: access, change, creation, deletion, info
database:
	the database category denotes events and metrics relating to a data storage and rerieval system.
	Ex. include event logs from MS SQL, MySQL, Elasticsearch, MongoDB
	expected event types for category database: access, change, info, error
driver:
	event int the driver category have to do with operating system device drivers and similar software such as windows drivers, kernel extension, kernel modules, etc.
	use events and metrics in this category
	expected event types for category driver: change, end, info, start
file:
	create,access, and deletion of file on filesystem
	event in this category can come from both host-based and network-based source. EX. zeek file.log
	expected event types for category file: change, creation, deletion, info
host:
	to see and analyzed information such as host inventory or host lifecycle events.
	this category information about hosts themselves; it is no meant to capture activity "happening on a host"
	expected event types for category host: access, change, end, info, start
iam:
	identify and access managment events relating to users, groups , and administration. to see and analyze logs and data from active directory, LDAP, Okta, Duo, and other IAM systems.
	expected event types for category iam: admin, change, creation, deletion, group, info, user
intrusion_detection:
	see and analyze intrusion_detection alert such as snort, suricata, palo alto threat decetions.
	expected event types for category intrusion_detection: allowed, denied, info
malware:
	logs from malware detection from EDR/EPP(Endpoint Detection & Response/Endpoint Protection Platform) system such as elastic end point security, symantec end point protection, network ips and ids
	expected event types for category malware: info
network:
	include all activity in network such as connection lifecycle, network traffic, and essentially any event that includes an IP address. to see and analyze count of network port, protocol, addresses,...
	expected event types for category network: access, allowed, connection, denied, end, info, protocol, start
package:
	relating to software package installed on hosts, to see and analyze host vulnerability in absence of vulnerability scan data expected event types for category package: access , change , deletion , info , installation , start
process:
	to see and analyze process-specific information such as lifecycle events or process ancestry. expected event types for category process: access, change, end, info, start
registey:
	include change setting and assets stored in the windows registey. to see and analyze activity such as registery access and modification.  expected event types for category registery : access, change, creation, deletion
session:
	include logical persistent connections to hosts and service. to see and analyze interction between assets. Data for this category may come from windows event logs, SSH logs, or stateless session such as HTTP cookie-based session, etc. expected event types for category registery : start, end, info
web:
	include web server access. zeek hhtp log may also be included int this category. expected event types for category web: access, error, info

//================================= event.type  =================================================================//
	
indicate the third level in the ECS category hierarchy
event.type represent a categorization "sub-bucket" that, when used along wiht the event.category field values, enables filtering events down to a level appropriate for single visualization 
event.type = [access, admin, allowd, change, connection, creation, deletion, denied, end, error, group, info, installation, protocol, start, user]

access:	
	used for the subset of event.category that indicate that something wa accessed. event.category: database AND event.type: access 
	* note that for file access both directory listing and file opens should be included in this subcategory
admin:
	EX. administrative changes within an IAM framework that do not specifically affect a user or group event.category : iam AND event.type:admin AND event.type:change
allowed:
	EX. group event.category : network AND event.type:connection AND event.type:allowed
change:
	EX. event.category : process AND event.type:change , event.category : file AND event.type:change
connection
	EX. event.category : network AND event.type:connection AND event.type: end
creation:
	EX. event.category : file AND event.type:creation
deletion
	EX. event.category : file AND event.type:deletion
denied:
	EX. event.category : Intrustion_detection AND event.type:denied use most of time for intrusion prevention assets
end:
	EX. event.category : process AND event.type:end
error:
	EX. event.category : database AND event.type:error but when we have pipline_error we should not use event.type:error
group:
	EX. event.category : iam AND event.type:creation AND event.type:group
info:
	EX. event.category : intrusion_detection AND event.type:info
installation:
	EX. event.category : package AND event.type:installation
protocol:
	EX. event.category : network AND event.type:protocol AND event.type:connection AND event.type:end
start:
	EX. event.category : process AND event.type:start
user:
	EX. event.category : iam AND event.type:deletion AND event.type:user

//========================================= event.outcome  =================================================================//

to indicate low level in the ECS category hierarchy.
denotes whether the event represents a success or a failure from the perspective of the entity that produces the event.
note that when single transaction in describes in multiple events, each event may populate diffrent values of event.outcome, according to their perpective.
event.outcome = [ failure, success, unknown ]
failure:
	indicate that this event describes a failed result. EX. event.category:file AND event.type:access AND event.outcome:failure indicate that a file access was attempted, but was not successful.
success:
	EX. event.category:file AND event.type:create AND event.outcome:success to indicate that a file was successfully created.
unknown:
	if the event contains information only about the request side of a transaction that results in a respones,populating event.outcome:unknown in the request event is appropriate. the unknown value should not be used when an outcome doesn't make logical sense for the event. in such cases event.outcome shoulde not be populated.
//========================================= Using  the categorization Fields  =================================================================//
event categorization field work together to identify and group similar events from multiple data sources.
these general principle can help guid the categorization process:
	1.Events from multiple data sources that are similar enough should fall into the same event.category field.
	2.Both event.category and event.type are array and may be populated with multiple allowd
	4. event.kind, event.category, event.type and event.outcome all have allowed values. This is to normalize these fields.
	5.value of event.outcome are a very limited set to indicate success or failure.Domain-specific actions, such as deny and allow, that could be considered outcomes are not capture in the event.come field, but rather in the event.type and/or event.action fields.
	6. values of event.category, event.type, and event.outcome are consistent across all values of event.kind
	7. when specific event doesn't fit into any of the defined allowed categorization values, the field should be left empty.

Jul 27 08:22:45 FW-OOB-1 RT_FLOW: RT_FLOW_SESSION_CREATE: session created 10.0.20.23/52281->10.0.77.36/161 None 10.0.20.23/52281->10.0.77.36/161 N/A N/A N/A N/A 17 PRTG_TO_MGMT_RANGE UNTRUST MGMT 160413 N/A(N/A) reth1.300 UNKNOWN UNKNOWN UNKNOWN

"event":{
	"kind":"event",
	"category":[
		"network"
	],
	"type":[
		"connection",
		"creation"
	],
	"outcome":"success",
	"action":"pass"
}
##################### Section Five (Migrating to ECS) #################

//============= Products and Solutions that Support ECS  =========//

The following Elastic products support ECS out of the box, as of version 7.0:
	1.Beats		2.APM		3.Elastic Security 		4.Elastic Endpoint Security Server 		5.Log Monitoring

An approach for converting an existing implementation to ECS.
1.Review each field in your orginal event and map it to the relevant ECS field.
	*Start by mapping your field to the relevant ECS Core field
	*if a relevant ECS Core field does not exist, map your field to the relevant ECS extended field
	*if no relevant ECS Extended field exists, consider keeping your  field with its original details, or possibly renaming it using ECS naming guidelines and attempt to map one or more of yuor original event field to it.
2.Review each ECS core field, and attemp to populate it.
	*Review your original event data again
	*Consider populating the field based on additioanal meta-data such as static information (e.g. add event.category:authentication even if your auth events don't mention the word "authentication")
	* Consider capturing additioanal environment meta-data, such as information about the host, consdier or cloud instance
3.Review other extended fields from any field set you are already usnig, and attempt to populate it as well.
4.Set ecs.version to the version of the schema you are conforming to. This will allow you to upgrade your sources, pipelines and content (like dashboards) smoothly in the future.

##################### Section Six  #################

The benefit of ECS: 
1. Data Correlation
2. Ease of recall
3. Ease of deduction 
4. Reuse
5. Future proofing
